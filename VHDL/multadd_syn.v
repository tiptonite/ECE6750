// megafunction wizard: %ALTMULT_ADD%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: ALTMULT_ADD 

// ============================================================
// File Name: multadd.v
// Megafunction Name(s):
// 			ALTMULT_ADD
//
// Simulation Library Files(s):
// 			altera_mf
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 18.0.0 Build 614 04/24/2018 SJ Lite Edition
// ************************************************************


//Copyright (C) 2018  Intel Corporation. All rights reserved.
//Your use of Intel Corporation's design tools, logic functions 
//and other software and tools, and its AMPP partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Intel Program License 
//Subscription Agreement, the Intel Quartus Prime License Agreement,
//the Intel FPGA IP License Agreement, or other applicable license
//agreement, including, without limitation, that your use is for
//the sole purpose of programming logic devices manufactured by
//Intel and sold by Intel or its authorized distributors.  Please
//refer to the applicable agreement for further details.


//altmult_add ADDNSUB_MULTIPLIER_PIPELINE_REGISTER1="UNREGISTERED" ADDNSUB_MULTIPLIER_PIPELINE_REGISTER3="UNREGISTERED" ADDNSUB_MULTIPLIER_REGISTER1="CLOCK0" ADDNSUB_MULTIPLIER_REGISTER3="CLOCK0" DEDICATED_MULTIPLIER_CIRCUITRY="YES" DEVICE_FAMILY="MAX 10" INPUT_REGISTER_A0="UNREGISTERED" INPUT_REGISTER_A1="UNREGISTERED" INPUT_REGISTER_A2="UNREGISTERED" INPUT_REGISTER_A3="UNREGISTERED" INPUT_REGISTER_B0="UNREGISTERED" INPUT_REGISTER_B1="UNREGISTERED" INPUT_REGISTER_B2="UNREGISTERED" INPUT_REGISTER_B3="UNREGISTERED" INPUT_SOURCE_A0="DATAA" INPUT_SOURCE_A1="DATAA" INPUT_SOURCE_A2="DATAA" INPUT_SOURCE_A3="DATAA" INPUT_SOURCE_B0="DATAB" INPUT_SOURCE_B1="DATAB" INPUT_SOURCE_B2="DATAB" INPUT_SOURCE_B3="DATAB" MULTIPLIER1_DIRECTION="ADD" MULTIPLIER3_DIRECTION="ADD" MULTIPLIER_REGISTER0="UNREGISTERED" MULTIPLIER_REGISTER1="UNREGISTERED" MULTIPLIER_REGISTER2="UNREGISTERED" MULTIPLIER_REGISTER3="UNREGISTERED" NUMBER_OF_MULTIPLIERS=4 OUTPUT_REGISTER="CLOCK0" port_addnsub1="PORT_UNUSED" port_addnsub3="PORT_UNUSED" port_signa="PORT_UNUSED" port_signb="PORT_UNUSED" REPRESENTATION_A="UNSIGNED" REPRESENTATION_B="UNSIGNED" SIGNED_PIPELINE_REGISTER_A="UNREGISTERED" SIGNED_PIPELINE_REGISTER_B="UNREGISTERED" SIGNED_REGISTER_A="CLOCK0" SIGNED_REGISTER_B="CLOCK0" WIDTH_A=8 WIDTH_B=8 WIDTH_RESULT=8 clock0 dataa datab result
//VERSION_BEGIN 18.0 cbx_alt_ded_mult_y 2018:04:24:18:04:18:SJ cbx_altera_mult_add 2018:04:24:18:04:18:SJ cbx_altera_mult_add_rtl 2018:04:24:18:04:18:SJ cbx_altmult_add 2018:04:24:18:04:18:SJ cbx_cycloneii 2018:04:24:18:04:18:SJ cbx_lpm_add_sub 2018:04:24:18:04:18:SJ cbx_lpm_mult 2018:04:24:18:04:18:SJ cbx_mgl 2018:04:24:18:08:49:SJ cbx_nadder 2018:04:24:18:04:18:SJ cbx_padd 2018:04:24:18:04:18:SJ cbx_parallel_add 2018:04:24:18:04:18:SJ cbx_stratix 2018:04:24:18:04:18:SJ cbx_stratixii 2018:04:24:18:04:18:SJ cbx_util_mgl 2018:04:24:18:04:18:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463



//adder DEVICE_FAMILY="MAX 10" WIDTH=17 dataa datab result
//VERSION_BEGIN 18.0 cbx_mgl 2018:04:24:18:08:49:SJ cbx_stratixii 2018:04:24:18:04:18:SJ cbx_util_mgl 2018:04:24:18:04:18:SJ  VERSION_END


//adder DEVICE_FAMILY="MAX 10" WIDTH=17 dataa datab result
//VERSION_BEGIN 18.0 cbx_mgl 2018:04:24:18:08:49:SJ cbx_stratixii 2018:04:24:18:04:18:SJ cbx_util_mgl 2018:04:24:18:04:18:SJ  VERSION_END


//adder DEVICE_FAMILY="MAX 10" WIDTH=18 dataa datab result
//VERSION_BEGIN 18.0 cbx_mgl 2018:04:24:18:08:49:SJ cbx_stratixii 2018:04:24:18:04:18:SJ cbx_util_mgl 2018:04:24:18:04:18:SJ  VERSION_END


//alt_ded_mult_y dedicated_multiplier_circuitry="YES" device_family="MAX 10" input_reg_a="UNREGISTERED" input_reg_b="UNREGISTERED" output_reg="UNREGISTERED" pipeline_reg="UNREGISTERED" representation_a="UNSIGNED" representation_b="UNSIGNED" sub_dedicated_multiplier_circuitry="YES" width_a=8 width_b=8 dataa datab result
//VERSION_BEGIN 18.0 cbx_alt_ded_mult_y 2018:04:24:18:04:18:SJ cbx_cycloneii 2018:04:24:18:04:18:SJ cbx_lpm_add_sub 2018:04:24:18:04:18:SJ cbx_mgl 2018:04:24:18:08:49:SJ cbx_nadder 2018:04:24:18:04:18:SJ cbx_padd 2018:04:24:18:04:18:SJ cbx_parallel_add 2018:04:24:18:04:18:SJ cbx_stratix 2018:04:24:18:04:18:SJ cbx_stratixii 2018:04:24:18:04:18:SJ cbx_util_mgl 2018:04:24:18:04:18:SJ  VERSION_END


//dffpipe DELAY=0 WIDTH=16 d q ALTERA_INTERNAL_OPTIONS=AUTO_SHIFT_REGISTER_RECOGNITION=OFF
//VERSION_BEGIN 18.0 cbx_mgl 2018:04:24:18:08:49:SJ cbx_stratixii 2018:04:24:18:04:18:SJ cbx_util_mgl 2018:04:24:18:04:18:SJ  VERSION_END

//synthesis_resources = 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"AUTO_SHIFT_REGISTER_RECOGNITION=OFF"} *)
module  multadd_dffpipe
	( 
	d,
	q) /* synthesis synthesis_clearbox=1 */;
	input   [15:0]  d;
	output   [15:0]  q;


	assign
		q = d;
endmodule //multadd_dffpipe

//synthesis_resources = dsp_9bit 1 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  multadd_ded_mult
	( 
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   [7:0]  dataa;
	input   [7:0]  datab;
	output   [15:0]  result;

	wire  [15:0]   wire_mac_mult12_dataout;
	wire  [15:0]   wire_mac_out13_dataout;
	wire  [15:0]   wire_pre_result_q;
	wire [3:0]  aclr;
	wire  [7:0]  x_dataa;
	wire  [7:0]  x_datab;
	wire  [0:0]  x_signa;
	wire  [0:0]  x_signb;

	fiftyfivenm_mac_mult   mac_mult12
	( 
	.aclr(aclr[0]),
	.dataa({x_dataa}),
	.datab({x_datab}),
	.dataout(wire_mac_mult12_dataout),
	.signa(x_signa),
	.signb(x_signb)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clk(1'b1),
	.ena(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_mult12.dataa_width = 8,
		mac_mult12.datab_width = 8,
		mac_mult12.lpm_type = "fiftyfivenm_mac_mult";
	fiftyfivenm_mac_out   mac_out13
	( 
	.dataa({wire_mac_mult12_dataout[15:0]}),
	.dataout(wire_mac_out13_dataout)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clk(1'b1),
	.ena(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		mac_out13.dataa_width = 16,
		mac_out13.lpm_type = "fiftyfivenm_mac_out";
	multadd_dffpipe   pre_result
	( 
	.d(wire_mac_out13_dataout[15:0]),
	.q(wire_pre_result_q));
	assign
		aclr = {4{1'b0}},
		result = wire_pre_result_q,
		x_dataa = dataa,
		x_datab = datab,
		x_signa = 1'b0,
		x_signb = 1'b0;
endmodule //multadd_ded_mult

//synthesis_resources = dsp_9bit 4 lut 52 reg 18 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  multadd_mult_add
	( 
	clock0,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   clock0;
	input   [31:0]  dataa;
	input   [31:0]  datab;
	output   [7:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri1   clock0;
	tri0   [31:0]  dataa;
	tri0   [31:0]  datab;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire	[16:0]	wire_add5_result;
	wire	[16:0]	wire_add7_result;
	wire	[17:0]	wire_add9_result;
	wire  [15:0]   wire_ded_mult1_result;
	wire  [15:0]   wire_ded_mult2_result;
	wire  [15:0]   wire_ded_mult3_result;
	wire  [15:0]   wire_ded_mult4_result;
	(* ALTERA_ATTRIBUTE = {"MAX_FANOUT=5"} *)
	reg	[17:0]	dffe11a;
	wire  [17:0]   wire_sft10a_in;
	wire  [17:0]   wire_sft10a_out;
	wire  [16:0]   wire_sft6a_in;
	wire  [16:0]   wire_sft8a_in;
	wire aclr0;
	wire  [31:0]  dataa_bus;
	wire  [31:0]  datab_bus;
	wire ena0;
	wire  [16:0]  w_input166w;
	wire  [16:0]  w_input173w;
	wire  [16:0]  w_input179w;
	wire  [16:0]  w_input185w;
	wire  [17:0]  w_input191w;
	wire  [17:0]  w_input197w;

	assign
		wire_add5_result = w_input166w + w_input173w;
	assign
		wire_add7_result = w_input179w + w_input185w;
	assign
		wire_add9_result = w_input191w + w_input197w;
	multadd_ded_mult   ded_mult1
	( 
	.dataa({dataa_bus[7:0]}),
	.datab({datab_bus[7:0]}),
	.result(wire_ded_mult1_result));
	multadd_ded_mult   ded_mult2
	( 
	.dataa({dataa_bus[15:8]}),
	.datab({datab_bus[15:8]}),
	.result(wire_ded_mult2_result));
	multadd_ded_mult   ded_mult3
	( 
	.dataa({dataa_bus[23:16]}),
	.datab({datab_bus[23:16]}),
	.result(wire_ded_mult3_result));
	multadd_ded_mult   ded_mult4
	( 
	.dataa({dataa_bus[31:24]}),
	.datab({datab_bus[31:24]}),
	.result(wire_ded_mult4_result));
	// synopsys translate_off
	initial
		dffe11a = 0;
	// synopsys translate_on
	always @ ( posedge clock0 or  posedge aclr0)
		if (aclr0 == 1'b1) dffe11a <= 18'b0;
		else if  (ena0 == 1'b1)   dffe11a <= wire_sft10a_out;
	soft   sft10a_0
	( 
	.in(wire_sft10a_in[0:0]),
	.out(wire_sft10a_out[0:0]));
	soft   sft10a_1
	( 
	.in(wire_sft10a_in[1:1]),
	.out(wire_sft10a_out[1:1]));
	soft   sft10a_2
	( 
	.in(wire_sft10a_in[2:2]),
	.out(wire_sft10a_out[2:2]));
	soft   sft10a_3
	( 
	.in(wire_sft10a_in[3:3]),
	.out(wire_sft10a_out[3:3]));
	soft   sft10a_4
	( 
	.in(wire_sft10a_in[4:4]),
	.out(wire_sft10a_out[4:4]));
	soft   sft10a_5
	( 
	.in(wire_sft10a_in[5:5]),
	.out(wire_sft10a_out[5:5]));
	soft   sft10a_6
	( 
	.in(wire_sft10a_in[6:6]),
	.out(wire_sft10a_out[6:6]));
	soft   sft10a_7
	( 
	.in(wire_sft10a_in[7:7]),
	.out(wire_sft10a_out[7:7]));
	soft   sft10a_8
	( 
	.in(wire_sft10a_in[8:8]),
	.out(wire_sft10a_out[8:8]));
	soft   sft10a_9
	( 
	.in(wire_sft10a_in[9:9]),
	.out(wire_sft10a_out[9:9]));
	soft   sft10a_10
	( 
	.in(wire_sft10a_in[10:10]),
	.out(wire_sft10a_out[10:10]));
	soft   sft10a_11
	( 
	.in(wire_sft10a_in[11:11]),
	.out(wire_sft10a_out[11:11]));
	soft   sft10a_12
	( 
	.in(wire_sft10a_in[12:12]),
	.out(wire_sft10a_out[12:12]));
	soft   sft10a_13
	( 
	.in(wire_sft10a_in[13:13]),
	.out(wire_sft10a_out[13:13]));
	soft   sft10a_14
	( 
	.in(wire_sft10a_in[14:14]),
	.out(wire_sft10a_out[14:14]));
	soft   sft10a_15
	( 
	.in(wire_sft10a_in[15:15]),
	.out(wire_sft10a_out[15:15]));
	soft   sft10a_16
	( 
	.in(wire_sft10a_in[16:16]),
	.out(wire_sft10a_out[16:16]));
	soft   sft10a_17
	( 
	.in(wire_sft10a_in[17:17]),
	.out(wire_sft10a_out[17:17]));
	assign
		wire_sft10a_in = wire_add9_result;
	soft   sft6a_0
	( 
	.in(wire_sft6a_in[0:0]),
	.out());
	soft   sft6a_1
	( 
	.in(wire_sft6a_in[1:1]),
	.out());
	soft   sft6a_2
	( 
	.in(wire_sft6a_in[2:2]),
	.out());
	soft   sft6a_3
	( 
	.in(wire_sft6a_in[3:3]),
	.out());
	soft   sft6a_4
	( 
	.in(wire_sft6a_in[4:4]),
	.out());
	soft   sft6a_5
	( 
	.in(wire_sft6a_in[5:5]),
	.out());
	soft   sft6a_6
	( 
	.in(wire_sft6a_in[6:6]),
	.out());
	soft   sft6a_7
	( 
	.in(wire_sft6a_in[7:7]),
	.out());
	soft   sft6a_8
	( 
	.in(wire_sft6a_in[8:8]),
	.out());
	soft   sft6a_9
	( 
	.in(wire_sft6a_in[9:9]),
	.out());
	soft   sft6a_10
	( 
	.in(wire_sft6a_in[10:10]),
	.out());
	soft   sft6a_11
	( 
	.in(wire_sft6a_in[11:11]),
	.out());
	soft   sft6a_12
	( 
	.in(wire_sft6a_in[12:12]),
	.out());
	soft   sft6a_13
	( 
	.in(wire_sft6a_in[13:13]),
	.out());
	soft   sft6a_14
	( 
	.in(wire_sft6a_in[14:14]),
	.out());
	soft   sft6a_15
	( 
	.in(wire_sft6a_in[15:15]),
	.out());
	soft   sft6a_16
	( 
	.in(wire_sft6a_in[16:16]),
	.out());
	assign
		wire_sft6a_in = wire_add5_result;
	soft   sft8a_0
	( 
	.in(wire_sft8a_in[0:0]),
	.out());
	soft   sft8a_1
	( 
	.in(wire_sft8a_in[1:1]),
	.out());
	soft   sft8a_2
	( 
	.in(wire_sft8a_in[2:2]),
	.out());
	soft   sft8a_3
	( 
	.in(wire_sft8a_in[3:3]),
	.out());
	soft   sft8a_4
	( 
	.in(wire_sft8a_in[4:4]),
	.out());
	soft   sft8a_5
	( 
	.in(wire_sft8a_in[5:5]),
	.out());
	soft   sft8a_6
	( 
	.in(wire_sft8a_in[6:6]),
	.out());
	soft   sft8a_7
	( 
	.in(wire_sft8a_in[7:7]),
	.out());
	soft   sft8a_8
	( 
	.in(wire_sft8a_in[8:8]),
	.out());
	soft   sft8a_9
	( 
	.in(wire_sft8a_in[9:9]),
	.out());
	soft   sft8a_10
	( 
	.in(wire_sft8a_in[10:10]),
	.out());
	soft   sft8a_11
	( 
	.in(wire_sft8a_in[11:11]),
	.out());
	soft   sft8a_12
	( 
	.in(wire_sft8a_in[12:12]),
	.out());
	soft   sft8a_13
	( 
	.in(wire_sft8a_in[13:13]),
	.out());
	soft   sft8a_14
	( 
	.in(wire_sft8a_in[14:14]),
	.out());
	soft   sft8a_15
	( 
	.in(wire_sft8a_in[15:15]),
	.out());
	soft   sft8a_16
	( 
	.in(wire_sft8a_in[16:16]),
	.out());
	assign
		wire_sft8a_in = wire_add7_result;
	assign
		aclr0 = 1'b0,
		dataa_bus = {dataa[31:0]},
		datab_bus = {datab[31:0]},
		ena0 = 1'b1,
		result = dffe11a[7:0],
		w_input166w = {1'b0, wire_ded_mult1_result[15:0]},
		w_input173w = {1'b0, wire_ded_mult2_result[15:0]},
		w_input179w = {1'b0, wire_ded_mult3_result[15:0]},
		w_input185w = {1'b0, wire_ded_mult4_result[15:0]},
		w_input191w = {1'b0, wire_add5_result},
		w_input197w = {1'b0, wire_add7_result};
endmodule //multadd_mult_add
//VALID FILE


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module multadd (
	clock0,
	dataa_0,
	dataa_1,
	dataa_2,
	dataa_3,
	datab_0,
	datab_1,
	datab_2,
	datab_3,
	result)/* synthesis synthesis_clearbox = 1 */;

	input	  clock0;
	input	[7:0]  dataa_0;
	input	[7:0]  dataa_1;
	input	[7:0]  dataa_2;
	input	[7:0]  dataa_3;
	input	[7:0]  datab_0;
	input	[7:0]  datab_1;
	input	[7:0]  datab_2;
	input	[7:0]  datab_3;
	output	[7:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri1	  clock0;
	tri0	[7:0]  dataa_0;
	tri0	[7:0]  dataa_1;
	tri0	[7:0]  dataa_2;
	tri0	[7:0]  dataa_3;
	tri0	[7:0]  datab_0;
	tri0	[7:0]  datab_1;
	tri0	[7:0]  datab_2;
	tri0	[7:0]  datab_3;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire [7:0] sub_wire10;
	wire [7:0] sub_wire9 = datab_3[7:0];
	wire [7:0] sub_wire8 = datab_2[7:0];
	wire [7:0] sub_wire7 = datab_1[7:0];
	wire [7:0] sub_wire4 = dataa_3[7:0];
	wire [7:0] sub_wire3 = dataa_2[7:0];
	wire [7:0] sub_wire2 = dataa_1[7:0];
	wire [7:0] sub_wire0 = dataa_0[7:0];
	wire [31:0] sub_wire1 = {sub_wire4, sub_wire3, sub_wire2, sub_wire0};
	wire [7:0] sub_wire5 = datab_0[7:0];
	wire [31:0] sub_wire6 = {sub_wire9, sub_wire8, sub_wire7, sub_wire5};
	wire [7:0] result = sub_wire10[7:0];

	multadd_mult_add	multadd_mult_add_component (
				.clock0 (clock0),
				.dataa (sub_wire1),
				.datab (sub_wire6),
				.result (sub_wire10));

endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: PRIVATE: ADDNSUB1_ACLR_SRC NUMERIC "3"
// Retrieval info: PRIVATE: ADDNSUB1_CLK_SRC NUMERIC "0"
// Retrieval info: PRIVATE: ADDNSUB1_PIPE_ACLR_SRC NUMERIC "3"
// Retrieval info: PRIVATE: ADDNSUB1_PIPE_CLK_SRC NUMERIC "0"
// Retrieval info: PRIVATE: ADDNSUB1_PIPE_REG STRING "0"
// Retrieval info: PRIVATE: ADDNSUB1_REG STRING "1"
// Retrieval info: PRIVATE: ADDNSUB3_ACLR_SRC NUMERIC "3"
// Retrieval info: PRIVATE: ADDNSUB3_CLK_SRC NUMERIC "0"
// Retrieval info: PRIVATE: ADDNSUB3_PIPE_ACLR_SRC NUMERIC "3"
// Retrieval info: PRIVATE: ADDNSUB3_PIPE_CLK_SRC NUMERIC "0"
// Retrieval info: PRIVATE: ADDNSUB3_PIPE_REG STRING "0"
// Retrieval info: PRIVATE: ADDNSUB3_REG STRING "1"
// Retrieval info: PRIVATE: ADD_ENABLE NUMERIC "0"
// Retrieval info: PRIVATE: ALL_REG_ACLR NUMERIC "0"
// Retrieval info: PRIVATE: A_ACLR_SRC_MULT0 NUMERIC "3"
// Retrieval info: PRIVATE: A_CLK_SRC_MULT0 NUMERIC "0"
// Retrieval info: PRIVATE: B_ACLR_SRC_MULT0 NUMERIC "3"
// Retrieval info: PRIVATE: B_CLK_SRC_MULT0 NUMERIC "0"
// Retrieval info: PRIVATE: HAS_MAC STRING "0"
// Retrieval info: PRIVATE: HAS_SAT_ROUND STRING "0"
// Retrieval info: PRIVATE: IMPL_STYLE_DEDICATED NUMERIC "1"
// Retrieval info: PRIVATE: IMPL_STYLE_DEFAULT NUMERIC "0"
// Retrieval info: PRIVATE: IMPL_STYLE_LCELL NUMERIC "0"
// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "MAX 10"
// Retrieval info: PRIVATE: MULT_REGA0 NUMERIC "0"
// Retrieval info: PRIVATE: MULT_REGB0 NUMERIC "0"
// Retrieval info: PRIVATE: MULT_REGOUT0 NUMERIC "0"
// Retrieval info: PRIVATE: NUM_MULT STRING "4"
// Retrieval info: PRIVATE: OP1 STRING "Add"
// Retrieval info: PRIVATE: OP3 STRING "Add"
// Retrieval info: PRIVATE: OUTPUT_EXTRA_LAT NUMERIC "0"
// Retrieval info: PRIVATE: OUTPUT_REG_ACLR_SRC NUMERIC "3"
// Retrieval info: PRIVATE: OUTPUT_REG_CLK_SRC NUMERIC "0"
// Retrieval info: PRIVATE: Q_ACLR_SRC_MULT0 NUMERIC "3"
// Retrieval info: PRIVATE: Q_CLK_SRC_MULT0 NUMERIC "0"
// Retrieval info: PRIVATE: REG_OUT NUMERIC "1"
// Retrieval info: PRIVATE: RNFORMAT STRING "8"
// Retrieval info: PRIVATE: RQFORMAT STRING "Q1.15"
// Retrieval info: PRIVATE: RTS_WIDTH STRING "8"
// Retrieval info: PRIVATE: SAME_CONFIG NUMERIC "1"
// Retrieval info: PRIVATE: SAME_CONTROL_SRC_A0 NUMERIC "1"
// Retrieval info: PRIVATE: SAME_CONTROL_SRC_B0 NUMERIC "1"
// Retrieval info: PRIVATE: SCANOUTA NUMERIC "0"
// Retrieval info: PRIVATE: SCANOUTB NUMERIC "0"
// Retrieval info: PRIVATE: SHIFTOUTA_ACLR_SRC NUMERIC "3"
// Retrieval info: PRIVATE: SHIFTOUTA_CLK_SRC NUMERIC "0"
// Retrieval info: PRIVATE: SHIFTOUTA_REG STRING "0"
// Retrieval info: PRIVATE: SIGNA STRING "UNSIGNED"
// Retrieval info: PRIVATE: SIGNA_ACLR_SRC NUMERIC "3"
// Retrieval info: PRIVATE: SIGNA_CLK_SRC NUMERIC "0"
// Retrieval info: PRIVATE: SIGNA_PIPE_ACLR_SRC NUMERIC "3"
// Retrieval info: PRIVATE: SIGNA_PIPE_CLK_SRC NUMERIC "0"
// Retrieval info: PRIVATE: SIGNA_PIPE_REG STRING "0"
// Retrieval info: PRIVATE: SIGNA_REG STRING "1"
// Retrieval info: PRIVATE: SIGNB STRING "UNSIGNED"
// Retrieval info: PRIVATE: SIGNB_ACLR_SRC NUMERIC "3"
// Retrieval info: PRIVATE: SIGNB_CLK_SRC NUMERIC "0"
// Retrieval info: PRIVATE: SIGNB_PIPE_ACLR_SRC NUMERIC "3"
// Retrieval info: PRIVATE: SIGNB_PIPE_CLK_SRC NUMERIC "0"
// Retrieval info: PRIVATE: SIGNB_PIPE_REG STRING "0"
// Retrieval info: PRIVATE: SIGNB_REG STRING "1"
// Retrieval info: PRIVATE: SRCA0 STRING "Multiplier input"
// Retrieval info: PRIVATE: SRCB0 STRING "Multiplier input"
// Retrieval info: PRIVATE: SYNTH_WRAPPER_GEN_POSTFIX STRING "1"
// Retrieval info: PRIVATE: WIDTHA STRING "8"
// Retrieval info: PRIVATE: WIDTHB STRING "8"
// Retrieval info: LIBRARY: altera_mf altera_mf.altera_mf_components.all
// Retrieval info: CONSTANT: ADDNSUB_MULTIPLIER_ACLR1 STRING "UNUSED"
// Retrieval info: CONSTANT: ADDNSUB_MULTIPLIER_ACLR3 STRING "UNUSED"
// Retrieval info: CONSTANT: ADDNSUB_MULTIPLIER_PIPELINE_REGISTER1 STRING "UNREGISTERED"
// Retrieval info: CONSTANT: ADDNSUB_MULTIPLIER_PIPELINE_REGISTER3 STRING "UNREGISTERED"
// Retrieval info: CONSTANT: ADDNSUB_MULTIPLIER_REGISTER1 STRING "CLOCK0"
// Retrieval info: CONSTANT: ADDNSUB_MULTIPLIER_REGISTER3 STRING "CLOCK0"
// Retrieval info: CONSTANT: DEDICATED_MULTIPLIER_CIRCUITRY STRING "YES"
// Retrieval info: CONSTANT: INPUT_REGISTER_A0 STRING "UNREGISTERED"
// Retrieval info: CONSTANT: INPUT_REGISTER_A1 STRING "UNREGISTERED"
// Retrieval info: CONSTANT: INPUT_REGISTER_A2 STRING "UNREGISTERED"
// Retrieval info: CONSTANT: INPUT_REGISTER_A3 STRING "UNREGISTERED"
// Retrieval info: CONSTANT: INPUT_REGISTER_B0 STRING "UNREGISTERED"
// Retrieval info: CONSTANT: INPUT_REGISTER_B1 STRING "UNREGISTERED"
// Retrieval info: CONSTANT: INPUT_REGISTER_B2 STRING "UNREGISTERED"
// Retrieval info: CONSTANT: INPUT_REGISTER_B3 STRING "UNREGISTERED"
// Retrieval info: CONSTANT: INPUT_SOURCE_A0 STRING "DATAA"
// Retrieval info: CONSTANT: INPUT_SOURCE_A1 STRING "DATAA"
// Retrieval info: CONSTANT: INPUT_SOURCE_A2 STRING "DATAA"
// Retrieval info: CONSTANT: INPUT_SOURCE_A3 STRING "DATAA"
// Retrieval info: CONSTANT: INPUT_SOURCE_B0 STRING "DATAB"
// Retrieval info: CONSTANT: INPUT_SOURCE_B1 STRING "DATAB"
// Retrieval info: CONSTANT: INPUT_SOURCE_B2 STRING "DATAB"
// Retrieval info: CONSTANT: INPUT_SOURCE_B3 STRING "DATAB"
// Retrieval info: CONSTANT: INTENDED_DEVICE_FAMILY STRING "MAX 10"
// Retrieval info: CONSTANT: LPM_TYPE STRING "altmult_add"
// Retrieval info: CONSTANT: MULTIPLIER1_DIRECTION STRING "ADD"
// Retrieval info: CONSTANT: MULTIPLIER3_DIRECTION STRING "ADD"
// Retrieval info: CONSTANT: MULTIPLIER_REGISTER0 STRING "UNREGISTERED"
// Retrieval info: CONSTANT: MULTIPLIER_REGISTER1 STRING "UNREGISTERED"
// Retrieval info: CONSTANT: MULTIPLIER_REGISTER2 STRING "UNREGISTERED"
// Retrieval info: CONSTANT: MULTIPLIER_REGISTER3 STRING "UNREGISTERED"
// Retrieval info: CONSTANT: NUMBER_OF_MULTIPLIERS NUMERIC "4"
// Retrieval info: CONSTANT: OUTPUT_ACLR STRING "UNUSED"
// Retrieval info: CONSTANT: OUTPUT_REGISTER STRING "CLOCK0"
// Retrieval info: CONSTANT: PORT_ADDNSUB1 STRING "PORT_UNUSED"
// Retrieval info: CONSTANT: PORT_ADDNSUB3 STRING "PORT_UNUSED"
// Retrieval info: CONSTANT: PORT_SIGNA STRING "PORT_UNUSED"
// Retrieval info: CONSTANT: PORT_SIGNB STRING "PORT_UNUSED"
// Retrieval info: CONSTANT: REPRESENTATION_A STRING "UNSIGNED"
// Retrieval info: CONSTANT: REPRESENTATION_B STRING "UNSIGNED"
// Retrieval info: CONSTANT: SIGNED_ACLR_A STRING "UNUSED"
// Retrieval info: CONSTANT: SIGNED_ACLR_B STRING "UNUSED"
// Retrieval info: CONSTANT: SIGNED_PIPELINE_REGISTER_A STRING "UNREGISTERED"
// Retrieval info: CONSTANT: SIGNED_PIPELINE_REGISTER_B STRING "UNREGISTERED"
// Retrieval info: CONSTANT: SIGNED_REGISTER_A STRING "CLOCK0"
// Retrieval info: CONSTANT: SIGNED_REGISTER_B STRING "CLOCK0"
// Retrieval info: CONSTANT: WIDTH_A NUMERIC "8"
// Retrieval info: CONSTANT: WIDTH_B NUMERIC "8"
// Retrieval info: CONSTANT: WIDTH_RESULT NUMERIC "8"
// Retrieval info: USED_PORT: clock0 0 0 0 0 INPUT VCC "clock0"
// Retrieval info: USED_PORT: dataa_0 0 0 8 0 INPUT GND "dataa_0[7..0]"
// Retrieval info: USED_PORT: dataa_1 0 0 8 0 INPUT GND "dataa_1[7..0]"
// Retrieval info: USED_PORT: dataa_2 0 0 8 0 INPUT GND "dataa_2[7..0]"
// Retrieval info: USED_PORT: dataa_3 0 0 8 0 INPUT GND "dataa_3[7..0]"
// Retrieval info: USED_PORT: datab_0 0 0 8 0 INPUT GND "datab_0[7..0]"
// Retrieval info: USED_PORT: datab_1 0 0 8 0 INPUT GND "datab_1[7..0]"
// Retrieval info: USED_PORT: datab_2 0 0 8 0 INPUT GND "datab_2[7..0]"
// Retrieval info: USED_PORT: datab_3 0 0 8 0 INPUT GND "datab_3[7..0]"
// Retrieval info: USED_PORT: result 0 0 8 0 OUTPUT GND "result[7..0]"
// Retrieval info: CONNECT: @clock0 0 0 0 0 clock0 0 0 0 0
// Retrieval info: CONNECT: @dataa 0 0 8 0 dataa_0 0 0 8 0
// Retrieval info: CONNECT: @dataa 0 0 8 8 dataa_1 0 0 8 0
// Retrieval info: CONNECT: @dataa 0 0 8 16 dataa_2 0 0 8 0
// Retrieval info: CONNECT: @dataa 0 0 8 24 dataa_3 0 0 8 0
// Retrieval info: CONNECT: @datab 0 0 8 0 datab_0 0 0 8 0
// Retrieval info: CONNECT: @datab 0 0 8 8 datab_1 0 0 8 0
// Retrieval info: CONNECT: @datab 0 0 8 16 datab_2 0 0 8 0
// Retrieval info: CONNECT: @datab 0 0 8 24 datab_3 0 0 8 0
// Retrieval info: CONNECT: result 0 0 8 0 @result 0 0 8 0
// Retrieval info: LIB_FILE: altera_mf
